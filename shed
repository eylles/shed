#!/bin/sh

prog="${0##*/}"

shed_pid="${$}"

# check if GUI_SESSION_PID is set
if [ -z "$GUI_SESSION_PID" ]; then
  # it wasnt set, so we will use the PID of the parent
  export GUI_SESSION_PID=$PPID
fi

# cuz $UID is not POSIX ¯\_(ツ)_/¯
# but it may be defined in the environment
if [ -z "$UID" ]; then
  # result of: id -u $USER
  UserID=$(id -u "$USER")
else
  UserID="$UID"
fi

# define XDG_RUNTIME_DIR if it doesn't exist
if [ -z "${XDG_RUNTIME_DIR}" ]; then
  # test if the usual location is writeable
  if [ -w "/run/user/${UserID}" ]; then
    # we can simply export it now
    export XDG_RUNTIME_DIR="/run/user/${UserID}"
  else
    # welp, gotta define it as something
    export XDG_RUNTIME_DIR=/tmp/"${UserID}"-runtime-dir
    if ! test -d "${XDG_RUNTIME_DIR}"; then
      mkdir "${XDG_RUNTIME_DIR}"
      chmod 0700 "${XDG_RUNTIME_DIR}"
    fi
  fi
fi

# dir for the pid files
# GUI_SESSION_PID=$$ must be exported in the xinitrc/xsession file
# to have the pid of the running graphical session
GUISessionDir=${XDG_RUNTIME_DIR}/GUISession${GUI_SESSION_PID}

# werether or not the GUISessionDir was present at startup
# 1=true btw
sessdir=0
# check if the session dir exists
if [ -d "$GUISessionDir" ]; then
  # let the program knows the dir exists
  sessdir=1
else
  # create the session dir if it doesn't exist
  mkdir -p "$GUISessionDir"
fi
# defined as: /run/user/${UserID}/GUISession${GUI_SESSION_PID}/socket
msg_socket="${GUISessionDir}/socket"
# defined as: /run/user/${UserID}/GUISession${GUI_SESSION_PID}/reply
msg_reply="${GUISessionDir}/reply"
# create the socket file if necessary
if [ ! -p "$msg_socket" ]; then
  if [ -f "$msg_socket" ]; then
    rm "$msg_socket"
  fi
  mkfifo -m 600 "$msg_socket"
fi
# create the reply socket file if necessary
# if [ ! -p "$msg_reply" ]; then
#   if [ -f "$msg_reply" ]; then
#     rm "$msg_reply"
#   fi
#   mkfifo -m 600 "$msg_reply"
# fi
# create the empty reply file if necessary
if [ -f "$msg_reply" ]; then
  : > "$msg_reply"
fi

# shed start file, contains the pid of the shed process
startfile="${GUISessionDir}/shed.started"

# werether shed is a fresh start or a post reload
reloaded=""

# check if shed is reloading, writing to socket is not possible when starting
# on a fresh session cuz no one is listening to the socket
if [ "$sessdir" = 1 ]; then
  if [ -f "$startfile" ]; then
    # the pid will not change when reloading as we use exec, so if the pid is
    # different then we should not run at all since only one instance should run
    # per session.
    file_pid=$(cat "$startfile")
    if [ "$file_pid" -eq "$shed_pid" ]; then
      reloaded=1
    else
      printf '%s\n' "${prog}: instance with pid ${file_pid} already running!"
      exit 1
    fi
  else
    printf '%s\n' "$shed_pid" > "$startfile"
  fi
else
  printf '%s\n' "$shed_pid" > "$startfile"
fi

# write started for when shedc requests a reload
[ -n "$reloaded" ] && printf '%s\n' "$prog started" > "$msg_reply"

# directory where we are loading the user services to start from
ServicesDir="${XDG_CONFIG_HOME:-~/.config}"/shed/services

# usage: serv_start service_name nosock nodelay
#   nosock: if the nosock arg is set then
#   no message is sent to the reply socket
#   passing 1 will set no sock mode
#   nodelay: if the nodelay arg is set then
#   no delay is applied to starting the service
#   passing 1 will set no delay mode
serv_start() {
  # clean up environment
  NSck=""
  NAME=""
  EXEC=""
  E_ARGS=""
  DELAY=""
  if [ ! "${2}" = 1 ]; then
    NSck=0
  else
    NSck="${2}"
  fi
  if [ ! "${3}" = 1 ]; then
    NDlay=0
  else
    NDlay="${3}"
  fi
  s_file="$1"
  # source the file to get the variables: NAME EXEC E_ARGS from the service
  . "$s_file"
  # check if service is already running
  if [ -f "${GUISessionDir}/${NAME}.pid" ]; then
    start_date=$(date '+%Y-%m-%d-%H:%M:%S')
    printf '%s\n' "$NAME $start_date running" >> "$msg_reply"
  else
    if [ -n "$DELAY" ] && [ "$NDlay" = 0 ]; then
      sleep "$DELAY"
    fi
    # run the service command with the arguments
    s_run="exec $EXEC $E_ARGS"
    eval "$s_run" &
    # catch the pid of the process
    proc_pid=$!
    # start date
    start_date=$(date '+%Y-%m-%d-%H:%M:%S')
    # write the pid of the process to the pid file
    printf '%s\n' "$proc_pid" > "${GUISessionDir}/${NAME}.pid"
    [ -z "$NSck" ] && printf '%s\n' "$NAME $start_date started" >> "$msg_reply"
  fi
}

# usage: start_services all | firstrun | <service name>
#   all: start all services
#   firstrun: start all services on first run mode
#   <service name>: the service name to start
#
#   only the first argument is acknowledged
start_services() {
  # start date
  start_date=$(date '+%Y-%m-%d-%H:%M:%S')
  printf '%s\n' "$start_date starting services" > "$msg_reply"
  # if all the services should be started
  if [ "all" = "$1" ]; then
    # for every service file in the services dir
    for i in "${ServicesDir}"/* ; do
      serv_start "$i" "0" "1" &
    done
  elif [ "firstrun" = "$1" ]; then
    # for every service file in the services dir
    for i in "${ServicesDir}"/* ; do
      serv_start "$i" "1" &
    done
  else
    for i in "${ServicesDir}"/* ; do
      ServiceFileName=$(basename "$i")
      if [ "$ServiceFileName" = "$1" ]; then
        serv_start "$i" "0" "1" &
      fi
    done
  fi
}

# Return type: string
#       Usage: readserviceprop "PROPERTY" service_file
#    property: key name
# --------------------------------------------------
# the service files store properties as key=value
# pairs, pass the name of the key to get the stored
# value, valid key names are:
#     NAME
#     EXEC
#     E_ARGS
#     DELAY
#     NOHUP
readserviceprop(){
  # Setting 'IFS' tells 'read' where to split the string.
  while IFS='=' read -r key val; do
    # Skip over lines containing comments.
    # (Lines starting with '#').
    [ "${key##\#*}" ] || continue

    # '$key' stores the key.
    # '$val' stores the value.
    if [ "$key" = "$1" ]; then
    printf '%s\n' "$val"
    fi
  done < "$2"
}

# usage: hupprocs all | <service name>
#   all: hup all services
#   <service name>: service to hup
hupprocs() {
  if [ -z "$1" ] || [ "all" = "$1" ]; then
    for i in "${GUISessionDir}"/*.pid ; do
      s_pid=$(read_file "$i")
      # s_name=$(ps -p "$s_pid" -o comm=)
      s_name="${i##*/}"
      printf 'sending hup to %s\t%s\n' "$s_pid" "$s_name" >> "$msg_reply"
      if kill -0 "$s_pid" 2>/dev/null; then
        [ -z "$dry_run" ] && kill -HUP "$s_pid"
      fi
    done
  else
    for i in "${ServicesDir}"/* ; do
      ServiceFileName="${i##*/}"
      if [ "$ServiceFileName" = "$1" ]; then
        s_name=$(readserviceprop "NAME" "$i")
        if [ -f "${GUISessionDir}/${s_name}.pid" ]; then
          s_pid=$(read_file "${GUISessionDir}/${s_name}.pid")
          printf 'sending hup to %s\t%s\n' "$s_pid" "$s_name" >> "$msg_reply"
          if kill -0 "$s_pid" 2>/dev/null; then
          [ -z "$dry_run" ] && kill -HUP "$s_pid"
          fi
        else
          printf 'service %s not running\n' "$s_name" >> "$msg_reply"
        fi
      fi
    done
  fi
}

# usage: killprocs all | <service name>
#   all: kill all services
#   <service name>: service to kill
killprocs() {
  if [ -z "$1" ] || [ "all" = "$1" ]; then
    for i in "${GUISessionDir}"/*.pid ; do
      s_pid=$(read_file "$i")
      # s_name=$(ps -p "$s_pid" -o comm=)
      s_name="${i##*/}"
      printf 'sending term to %s\t%s\n' "$s_pid" "$s_name" >> "$msg_reply"
      if kill -0 "$s_pid" 2>/dev/null; then
      [ -z "$dry_run" ] && kill "$s_pid"
      fi
      [ -z "$dry_run" ] && rm -f "$i"
    done
  else
    for i in "${ServicesDir}"/* ; do
      ServiceFileName="${i##*/}"
      if [ "$ServiceFileName" = "$1" ]; then
        s_name=$(readserviceprop "NAME" "$i")
        if [ -f "${GUISessionDir}/${s_name}.pid" ]; then
          s_pid=$(read_file "${GUISessionDir}/${s_name}.pid")
          printf 'sending term to %s\t%s\n' "$s_pid" "$s_name" >> "$msg_reply"
          if kill -0 "$s_pid" 2>/dev/null; then
          [ -z "$dry_run" ] && kill "$s_pid"
          fi
          [ -z "$dry_run" ] && rm -f "${GUISessionDir}/${s_name}.pid"
        else
          printf 'service %s not running\n' "$s_name" >> "$msg_reply"
        fi
      fi
    done
  fi
}

daemon_cycle() {
  Action=""
  Argument=""
  # daemon cycle to run until we receive a reload action in the socket
  while [ -z "$SHED_RELOAD" ] || [ "$SHED_RELOAD" = 0 ] ; do
    # check that the GUISessionDir exists
    if [ -d "${GUISessionDir}" ]; then
      # wait until a write is done to the socket
      # read the contents of the socket, action and argument
      # drain the named pipe $msg_socket
      SocInput=$(cat "$msg_socket")
      # from the socket, first column separated by space
      Action="${SocInput%% *}"
      # from the socket, second column separated by space
      Argument="${SocInput##* }"
      # debug prints
      # printf 'action: %s\n' $Action
      # printf 'argument: %s\n' $Argument
      # decide what to do with the read action and argument
      case "${Action}" in
        reload) SHED_RELOAD=1 ;;
        start) start_services "$Argument" ;;
        stop)  killprocs "$Argument" ;;
        hup)   hupprocs "$Argument" ;;
      esac
    else
      # shed must exit
      SHED_RELOAD=2
    fi
  done
}
# start all services on first run
start_str=""
if [ "$reloaded" = 1 ]; then
  start_str="all"
else
  start_str="firstrun"
fi
start_services "$start_str"

daemon_cycle

# reload shed
[ "$SHED_RELOAD" = 1 ] && exec shed
