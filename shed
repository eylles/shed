#!/bin/sh

# if we reloaded then we set this to 0
SHED_RELOAD=0

# dir for the pid files
# GUI_SESSION_PID=$$ must be exported in the xinitrc/xsession file
# to have the pid of the running graphical session
GUISessionDir=/tmp/GUISession${GUI_SESSION_PID}
# create the session dir if it doesn't exist
[ -d "$GUISessionDir" ] || mkdir -p "$GUISessionDir"
# create the empty socket file if necesary
[ -f "${GUISessionDir}socket" ] || : > "${GUISessionDir}/socket"

# directory where we are loading the user services to start from
ServicesDir="${XDG_CONFIG_HOME:-~/.config}"/shed/services

serv_start() {
  # clean up environment
  NAME=""
  EXEC=""
  E_ARGS=""
  s_file="$1"
  # source the file to get the variables: NAME EXEC E_ARGS from the service
  . "$s_file"
  # check if service is already running
  if [ -f "${GUISessionDir}/${NAME}.pid" ]; then
    printf 'service %s already running\n' "$NAME"
  else
    # run the service command with the arguments
    s_run="exec $EXEC $E_ARGS"
    eval "$s_run" &
    # catch the pid of the process
    proc_pid=$!
    # write the pid of the process to the pid file
    printf '%s\n' "$proc_pid" > "${GUISessionDir}/${NAME}.pid"
  fi
}

start_services() {
  # if all the services should be started
  if [ "all" = "$1" ]; then
    # for every service file in the services dir
    for i in "${ServicesDir}"/* ; do
      serv_start "$i"
    done
  else
    for i in "${ServicesDir}"/* ; do
      ServiceFileName=$(basename "$i")
      if [ "$ServiceFileName" = "$1" ]; then
        serv_start "$i"
      fi
    done
  fi
}

daemon_cycle() {
  Action=""
  Argument=""
  # daemon cycle to run until we recieve a reload action in the socket
  while [ "$SHED_RELOAD" = 0 ] ; do
    # wait until a write is done to the socket
    inotifywait -e modify --format %0 "/tmp/GUISession${GUI_SESSION_PID}/socket"
    # read the contents of the socket, action and argument
    while read -r SocAct SocArg; do
      Action=$SocAct
      Argument=$SocArg
    done < "${GUISessionDir}/socket"
    # clear socket
    : > "${GUISessionDir}/socket"
    # debug prints
    # printf 'action: %s\n' $Action
    # printf 'argument: %s\n' $Argument
    # decide what to do with the read action and argument
    case "${Action}" in
      reload) SHED_RELOAD=1 ;;
      start) start_services "$Argument" ;;
    esac
  done
}
# start all services on first run
start_services "all"

daemon_cycle

# reload shed
[ "$SHED_RELOAD" = 0 ] || exec shed
